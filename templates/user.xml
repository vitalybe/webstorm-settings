<templateSet group="user">
  <template name="tmp" value="print &quot;!!!!!! $NAME$ !!!!!!!&quot;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="pyFunctionName()" defaultValue="" alwaysStopAt="false" />
  </template>
  <template name="lct" value="let logger = loggerCreator(&quot;test&quot;, moduleLogger);" description="logger create - test" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="imp" value="import $WHAT$ from &quot;app/$PATH$&quot;;" description="import" toReformat="true" toShortenFQNames="true">
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WHAT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="new_single_instance_class" value="import loggerCreator from &quot;app/utils/logger&quot;;&#10;//noinspection JSUnusedLocalSymbols&#10;const moduleLogger = loggerCreator(&quot;$NAME$&quot;);&#10;&#10;&#10;class $NAME$ {&#10;&#10;    constructor() {&#10;    }&#10;&#10;}&#10;&#10;export const $CAMELCASE_NAME$ = new $NAME$();" description="" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAMELCASE_NAME" expression="camelCase(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="new_react_native_component" value="import loggerCreator from &quot;app/utils/logger&quot;;&#10;//noinspection JSUnusedLocalSymbols&#10;var moduleLogger = loggerCreator(&quot;$NAME$&quot;);&#10;&#10;import React, { Component } from &quot;react&quot;;&#10;import { Image, StyleSheet, Text, View } from &quot;react-native&quot;;&#10;import { observer } from &quot;mobx-react&quot;;&#10;&#10;const styles = StyleSheet.create({&#10;});&#10;&#10;@observer&#10;export default class $NAME$ extends Component {&#10;  render() {&#10;    return &lt;View /&gt;;&#10;  }&#10;}&#10;&#10;$NAME$.propTypes = {};&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="lc" value="$LOGGER_VAR$loggerCreator(&quot;$METHOD$&quot;, moduleLogger);" description="" toReformat="true" toShortenFQNames="true">
    <variable name="LOGGER_VAR" expression="" defaultValue="&quot;const logger = &quot;" alwaysStopAt="true" />
    <variable name="METHOD" expression="jsMethodName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name=".cls" value="&amp; &gt; .$CLS$ {&#10;  &#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="CLS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
  <template name="sd" value="const $NAME$ = styled.div`&#10;  ${(props: {}) =&gt; css`&#10;    $CURSOR$&#10;  `};&#10;`;" description="Styled div" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CURSOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>